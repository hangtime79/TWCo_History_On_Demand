<?xml version="1.0" encoding="UTF-8"?><!--***********************************************************************--><!----><!--Licensed Materials - Property of IBM--><!----><!--IBM SPSS Products: Modeler Common--><!----><!--(C) Copyright IBM Corp. 1989, 2018--><!----><!--US Government Users Restricted Rights - Use, duplication or disclosure--><!--restricted by GSA ADP Schedule Contract with IBM Corp.--><!----><!--***********************************************************************--><Extension debug="false" version="8.0" xmlns="http://xml.spss.com/pasw/extension" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://xml.spss.com/pasw/extension http://xml.spss.com/pasw/extension/ExtensionSpecification.xsd">
  <ExtensionDetails description="Created by CDB" id="TWCoHistoryOnDemand" label="TWCo_History_On_Demand" provider="IBM SPSS, Inc." providerTag="spss" version="8.0"/>
  <Resources>
    <Bundle id="bundle6" path="TWCoHistoryOnDemand" type="properties"/>
    <JarFile id="jar" path="cdb_peer.jar"/>
    <HelpInfo id="nativeHelp" type="native"/>
  </Resources>
  <CommonObjects>
    <PropertyTypes>
      <Enumeration id="OutputMode">
        <Enum resourceKey="OutputMode.Screen" value="Screen"/>
        <Enum resourceKey="OutputMode.File" value="File"/>
      </Enumeration>
      <Enumeration id="OutputType">
        <Enum resourceKey="OutputType.Graph" value="Graph"/>
        <Enum resourceKey="OutputType.Text" value="Text"/>
      </Enumeration>
      <Enumeration id="OutputFileType">
        <Enum resourceKey="SaveFileDialogHTMLDescription" value="HTML"/>
        <Enum resourceKey="SaveFileDialogTextDescription" value="Text"/>
        <Enum resourceKey="SaveFileDialogCouDescription" value="Cou"/>
      </Enumeration>
      <Enumeration id="GraphOutputFileType">
        <Enum resourceKey="SaveFileDialogHTMLDescription" value="HTML"/>
        <Enum resourceKey="SaveFileDialogCouDescription" value="Cou"/>
      </Enumeration>
      <Enumeration id="TextOutputFileType">
        <Enum resourceKey="SaveFileDialogHTMLDescription" value="HTML"/>
        <Enum resourceKey="SaveFileDialogCouDescription" value="Cou"/>
        <Enum resourceKey="SaveFileDialogTextDescription" value="Text"/>
      </Enumeration>
      <Enumeration id="item_50">
        <Enum resourceKey="reanalysis" value="reanalysis"/>
        <Enum resourceKey="conditions" value="conditions"/>
      </Enumeration>
      <Enumeration id="item_unit">
        <Enum resourceKey="item_20_1" value="item_20_1"/>
        <Enum resourceKey="item_20_2" value="item_20_2"/>
        <Enum resourceKey="item_20_4" value="item_20_4"/>
      </Enumeration>
      <Enumeration id="item_results_language">
        <Enum resourceKey="ar-AE" value="ar-AE"/>
        <Enum resourceKey="bn-BD" value="bn-BD"/>
        <Enum resourceKey="bn-IN" value="bn-IN"/>
        <Enum resourceKey="ca-ES" value="ca-ES"/>
        <Enum resourceKey="hr-HR" value="hr-HR"/>
        <Enum resourceKey="cs-CZ" value="cs-CZ"/>
        <Enum resourceKey="da-DK" value="da-DK"/>
        <Enum resourceKey="nl-NL" value="nl-NL"/>
        <Enum resourceKey="en-AU" value="en-AU"/>
        <Enum resourceKey="en-GB" value="en-GB"/>
        <Enum resourceKey="en-IN" value="en-IN"/>
        <Enum resourceKey="en-US" value="en-US"/>
        <Enum resourceKey="fa-IR" value="fa-IR"/>
        <Enum resourceKey="fi-FI" value="fi-FI"/>
        <Enum resourceKey="fr-CA" value="fr-CA"/>
        <Enum resourceKey="fr-FR" value="fr-FR"/>
        <Enum resourceKey="de-DE" value="de-DE"/>
        <Enum resourceKey="de-CH" value="de-CH"/>
        <Enum resourceKey="el-GR" value="el-GR"/>
        <Enum resourceKey="he-IL" value="he-IL"/>
        <Enum resourceKey="iw-IL" value="iw-IL"/>
        <Enum resourceKey="hi-IN" value="hi-IN"/>
        <Enum resourceKey="hu-HU" value="hu-HU"/>
        <Enum resourceKey="in-ID" value="in-ID"/>
        <Enum resourceKey="it-IT" value="it-IT"/>
        <Enum resourceKey="it-CH" value="it-CH"/>
        <Enum resourceKey="ja-JP" value="ja-JP"/>
        <Enum resourceKey="kk-KZ" value="kk-KZ"/>
        <Enum resourceKey="ko-KR" value="ko-KR"/>
        <Enum resourceKey="ms-MY" value="ms-MY"/>
        <Enum resourceKey="no-NO" value="no-NO"/>
        <Enum resourceKey="nn-NO" value="nn-NO"/>
        <Enum resourceKey="pl-PL" value="pl-PL"/>
        <Enum resourceKey="pt-BR" value="pt-BR"/>
        <Enum resourceKey="pt-PT" value="pt-PT"/>
        <Enum resourceKey="ro-RO" value="ro-RO"/>
        <Enum resourceKey="ru-RU" value="ru-RU"/>
        <Enum resourceKey="sk-SK" value="sk-SK"/>
        <Enum resourceKey="es-AR" value="es-AR"/>
        <Enum resourceKey="es-UN" value="es-UN"/>
        <Enum resourceKey="es-LA" value="es-LA"/>
        <Enum resourceKey="es-MX" value="es-MX"/>
        <Enum resourceKey="es-ES" value="es-ES"/>
        <Enum resourceKey="es-US" value="es-US"/>
        <Enum resourceKey="sv-SE" value="sv-SE"/>
        <Enum resourceKey="th-TH" value="th-TH"/>
      </Enumeration>
      <Enumeration id="item_locationtype">
        <Enum resourceKey="item_19_a" value="item_19_a"/>
        <Enum resourceKey="item_19_b" value="item_19_b"/>
        <Enum resourceKey="item_19_c" value="item_19_c"/>
        <Enum resourceKey="item_19_d" value="item_19_d"/>
        <Enum resourceKey="item_19_e" value="item_19_e"/>
      </Enumeration>
      <Enumeration id="item_countrycode">
        <Enum resourceKey="FR" value="FR"/>
        <Enum resourceKey="DE" value="DE"/>
        <Enum resourceKey="IT" value="IT"/>
        <Enum resourceKey="US" value="US"/>
        <Enum resourceKey="GB" value="GB"/>
      </Enumeration>
      <Enumeration id="item_geospatial_query_type">
        <Enum resourceKey="item_51_a" value="item_51_a"/>
        <Enum resourceKey="item_51_b" value="item_51_b"/>
        <Enum resourceKey="item_51_c" value="item_51_c"/>
        <Enum resourceKey="item_51_d" value="item_51_d"/>
      </Enumeration>
    </PropertyTypes>
    <PropertySets>
      <PropertySet id="OutputProperties">
        <Property defaultValue="false" name="outputRename" valueType="boolean"/>
        <Property defaultValue="" name="outputName" valueType="string"/>
        <Property defaultValue="Screen" name="output_mode" type="OutputMode"/>
        <Property defaultValue="HTMLOutput" name="output_container_id" type="string"/>
        <Property defaultValue="html" name="output_container_type" type="string"/>
        <Property defaultValue="Graph" name="output_type" type="OutputType"/>
        <Property defaultValue="" name="output_filename" type="string"/>
        <Property defaultValue="HTML" name="output_file_type" type="OutputFileType"/>
        <Property defaultValue="HTML" name="graph_output_file_type" type="GraphOutputFileType"/>
        <Property defaultValue="Text" name="text_output_file_type" type="TextOutputFileType"/>
      </PropertySet>
    </PropertySets>
    <Actions>
      <Action extensionAction="helpButton" id="helpButton" resourceKey="helpButton"/>
      <Action extensionAction="saveNode" id="saveNode" resourceKey="saveNode"/>
      <Action extensionAction="storeNode" id="storeNode" resourceKey="storeNode"/>
      <Action extensionAction="save" id="save" resourceKey="save"/>
      <Action extensionAction="saveAs" id="saveAs" resourceKey="saveAs"/>
      <Action extensionAction="store" id="store" resourceKey="store"/>
      <Action extensionAction="close" id="close" resourceKey="close"/>
      <Action extensionAction="closeDelete" id="closeDelete" resourceKey="closeDelete"/>
      <Action extensionAction="headerAndFooter" id="headerAndFooter" resourceKey="headerAndFooter"/>
      <Action extensionAction="pageSetup" id="pageSetup" resourceKey="pageSetup"/>
      <Action extensionAction="printView" id="printView" parameter="modelViewer" resourceKey="printView"/>
      <Action extensionAction="printPreview" id="printPreview" parameter="modelViewer" resourceKey="printPreview"/>
      <Action extensionAction="print" id="print" parameter=" modelViewer" resourceKey="print"/>
      <Action extensionAction="copy" id="copy" resourceKey="copy"/>
      <Action extensionAction="exportText" id="exportText" parameter="text" resourceKey="exportText"/>
      <Action extensionAction="exportText" id="exportText" parameter="applier_console" resourceKey="exportConsole"/>
      <Action extensionAction="exportHTML" id="exportHTML" parameter="HTML" resourceKey="exportHTML"/>
      <Action extensionAction="exportHTML" id="exportHTML" parameter="modelViewer" resourceKey="exportModelViewer"/>
      <Action extensionAction="exportText" id="exportHTML" parameter="pmml" resourceKey="exportPMML"/>
      <Action extensionAction="publish" id="publish" resourceKey="publish"/>
      <Action extensionAction="generateModelToPalette" id="generateModelToPalette" resourceKey="generateModelToPalette"/>
      <Action extensionAction="previewTable" id="previewTable" resourceKey="previewTable"/>
      <Action extensionAction="saveToProject" id="saveToProject" resourceKey="saveToProject"/>
      <Action extensionAction="print" id="printButton" resourceKey="printButton"/>
      <Action extensionAction="closeDelete" id="closeButton" resourceKey="closeButton"/>
    </Actions>
  </CommonObjects>
  <Feature canGenerateASL="true" id="TWCoHistoryOnDemand" includesAnnotation="true" peerClass="com.spss.shared.custom_gui.ui_builder.peers.RStatsProcessPeer" resourceKey="TWCoHistoryOnDemand">
    <ModuleImports>
      <ModuleImport moduleId="pasw.rstats">
        <ComponentImport componentId="rprocess"/>
      </ModuleImport>
      <ModuleImport moduleId="pasw.rstats">
        <ComponentImport componentId="rinteractor"/>
      </ModuleImport>
    </ModuleImports>
    <Containers>
      <Container name="ApplierConsoleOutput"/>
    </Containers>
    <Properties>
      <ImportProperties context="rprocess"/>
      <ImportProperties context="rinteractor"/>
      <Property defaultValue="# **********************************Header*************************************\n# *********GENERAL*********\n# OBJECT NAME: TWCoHistoryAdvanced \n# VERSION: 3.0\n# OBJECT TYPE: R Custom Node\n# CATEGORY: Utility\n# SUBCATEGORY: Weather\n# CREATED BY:   YU WENPEI&#9;\n# DATE:         11/15/2016\n# MODIFIED BY:  GRANT CASE\n# DATE:         03/19/2017\n# DESCRIPTION:\n# SPSS Modeler Predictive Extension to call the Historical-Site\n# based TWCo API and return results.\n#\n# TWCo API Documentation\n# https://docs.google.com/document/d/1HVKgGRdO4nPViF3YFC3e6MVd1nJvoYw202rGzaiOwbc/edit\n# \n#\n#\n# \n# \n# *********DEPENDENCIES*********\n# PACKAGES:\n# httr\n# plyr\n# dplyr\n# jsonline\n# lubridate\n# mefa\n# \n# \n# *********MODIFICATION LOG*********\n# DATE        INITIALS MODIFICATION\n# 11/15/2016  YW\n# Created  \n# 01/29/2017  GSC      \n# Forked to ensure correct results by aligning measures datatypes also\n# add comments, sections, and headers for easier understanding. Now returning\n# metadata and allows for different return languages, units, and no longer\n# do postal codes need to be prefaced with the correct country code. This is\n# now handled in the extension. Also updated so columns with spaces will no\n# longer be an issue.\n# 03/19/2017 GSC\n# Added code so that users can pass more than 30 days of data\n#\n# *********TODO LOG*********\n# TODO(Grant Case): Add parallelism code\n#\n#\n#\n#\n# *********HEADER CONVENTIONS*********\n# DO NOT GO PAST 80 CHARACTERS\n# TO DEBUG, REPLACE ALL &quot;&quot;\n# TO TURN DEBUG OFF, FIND ALL LINES WITH &quot;  # DB&quot; AND &quot;&quot; AT BEGINNING\n# **********************************Header*************************************\n# Careful below, this line of code one will completely wipe out the variables \n# (your SPSS console), will have nothing in it. If you are doing development work and \n# are creating variables and such, you may have issues when you reload \n# the .RData file. This line of code will specifically eliminate anything BUT \n# whats being sent by Modeler. Think of it as a reset. Its commented out with a \n# RESET tag even though its helpful for Debugging purposes because of what it \n# does. \n# http://r.789695.n4.nabble.com/How-to-remove-all-objects-except-a-few-specified-objects-td2335651.html\n# RESET rm(list= ls()[!(ls() %in% c('modelerData','modelerDataModel','ibmspsscfpkg.connections',\n#                           'ibmspsscfpkg.fileNamesList','ibmspsscfpkg.htmlFilesCount',\n#                           'ibmspsscfpkg.oldwd','ibmspsscfpkg.zipFileNames'))]) \n# -----------------------------------------------------------------------------\n# -- PACKAGE DECLARATION SECTION\n# -----------------------------------------------------------------------------\n# ********************Create test for package existence************************\nlist.of.packages &lt;- c(&quot;httr&quot;,&quot;plyr&quot;,&quot;dplyr&quot;,&quot;lubridate&quot;,&quot;urltools&quot;,&quot;jsonlite&quot;,&quot;mefa&quot;)\nnew.packages &lt;- list.of.packages[!(list.of.packages %in% installed.packages()[,&quot;Package&quot;])]\nif(length(new.packages)) install.packages(new.packages)\n\n\n\n# ****************************Packages to Use**********************************\nlibrary(httr)\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(urltools)\nlibrary(jsonlite)\nlibrary(mefa)\nprint(&quot;End Install Package&quot;) # DB\n\n\n# -----------------------------------------------------------------------------\n# -- CUSTOM DIALOG VARIABLE DECLARATION SECTION\n# -----------------------------------------------------------------------------\ninput_apikey            &lt;- &quot;%%item_apikey%%&quot;\ninput_requestType       &lt;- %%item_locationtype%%\ninput_countrycode       &lt;- &quot;%%item_countrycode%%&quot;\ninput_latitude          &lt;- &quot;%%item_lat%%&quot;\ninput_longitude         &lt;- &quot;%%item_lon%%&quot;\ninput_postalcode        &lt;- &quot;%%item_postalcode%%&quot;\ninput_startDate         &lt;- &quot;%%item_startdate%%&quot;\ninput_endDate           &lt;- &quot;%%item_enddate%%&quot; \ninput_units             &lt;- &quot;%%item_unit%%&quot;\n  # e = English units\n  # m = Metric units\n  # h = Hybrid units (UK)\n  # s = Metric SI units (not available for all APIs)\ninput_date_inputtype    &lt;- %%item_date_group%%\n  # is_variable\n  # is_textinput\ninput_startDate_text    &lt;- &quot;%%item_startdate_input%%&quot;\ninput_endDate_text      &lt;- &quot;%%item_enddate_input%%&quot;\ninput_countrycode       &lt;- &quot;%%item_countrycode%%&quot;\ninput_results_language  &lt;- &quot;%%item_results_language%%&quot;\ndialog.option.locationtype    &lt;- input_requestType\ndialog.option.dateinput       &lt;- input_date_inputtype\ndialog.column.apikey          &lt;- input_apikey\ndialog.column.units           &lt;- input_units\ndialog.column.countrycode     &lt;- input_countrycode\ndialog.column.language        &lt;- input_results_language\n# Added for Future Use\n# TODO(Grant Case): Add in Timezone so as to allow the user to switch between \n# GMT or Local Time when showing date/time\ndialog.column.timezone        &lt;- &quot;GMT&quot; \ndialog.column.latitude.name   &lt;- make.names(input_latitude)\ndialog.column.longitude.name  &lt;- make.names(input_longitude)\ndialog.column.postalcode.name &lt;- make.names(input_postalcode)\ndialog.column.startdate.name  &lt;- make.names(input_startDate)\ndialog.column.enddate.name    &lt;- make.names(input_endDate)\ndialog.column.startdate.value &lt;- input_startDate_text\ndialog.column.enddate.value   &lt;- input_endDate_text\ndate.input.type &lt;- dialog.option.dateinput \nlocation.type &lt;- dialog.option.locationtype\ntimezone.type &lt;- dialog.column.timezone\n\nnames(modelerData) &lt;- make.names(colnames(modelerData))\n\n# -----------------------------------------------------------------------------\n# -- CONSTANT SET SECTION\n# -----------------------------------------------------------------------------\nkErrorOutputPrefix               &lt;- &quot;TWCoHistoryAdvanced Node Error: &quot;\nkDebugImageLocation              &lt;- &quot;C:/Users/GrantCASE/Box Sync/My Work Folder/IBM SPSS Predictive Extensions/TWCo_History_Advanced/Code/Debug/TWCoHistoryAdvanced.RData&quot;\nkDebugImageLocation2             &lt;- &quot;C:/Users/GrantCASE/Box Sync/My Work Folder/IBM SPSS Predictive Extensions/TWCo_History_Advanced/Code/Debug/modelerDebug.RData&quot;\nkmodDLatitudeColNameConstant     &lt;- &quot;latitude&quot;\nkmodDLongitudeColNameConstant    &lt;- &quot;longitude&quot;\nkmodDPostalCodeColNameConstant   &lt;- &quot;postal.code&quot;\nkmodDStationIDColNameConstant    &lt;- &quot;station.id&quot;\nkmodDStartDateColNameConstant    &lt;- &quot;start.date&quot;\nkmodDEndDateColNameConstant      &lt;- &quot;end.date&quot;\nkmodDLocationURLColNameConstant  &lt;- &quot;location.type&quot;\nkmodDLatCommaLongColNameConstant &lt;- &quot;lat.comma.long&quot;\nkmodDPostalKeyColNameConstant    &lt;- &quot;postal.key&quot;\nkAPIHistorySite                  &lt;- &quot;History-Site&quot;\nkAPILocation                     &lt;- &quot;Location-Point&quot;\nkBaseURLColNameConstant          &lt;- &quot;Base.URL&quot;\nkBaseLocationURLColNameConstant  &lt;- &quot;Location.URL&quot;\n#DEBUG save.image(file=kDebugImageLocation, safe=FALSE) # DB\nprint(&quot;End Custom Dialog&quot;) # DB\n\n\nRetrieveTWCoBaseURL &lt;- function(API.Location, API) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: RetrieveTWCoBaseURL\n  # DESCRIPTION: This function accepts a data frame in the style of\n  # modelerDataModel and will return a data frame will legal R field names that\n  # in theory should match modelerData.\n  #\n  # Args:\n  #   API.Location: (string) Equivalent to whether being searched by lat/long \n  #   or being searched by postal code.\n  #   API: The actual version of the The Weather Channel API that is being\n  #   called. Depending on the information that needs to be returned.\n  #\n  # Returns:\n  # The base URL that will be updated later on by other functions and script.\n  # \n  # TODO(Grant Case): Add Current and Forecast URL strings\n  # **********************************Header***********************************\n  if (API.Location == &quot;geocode&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n    BaseURL   &lt;- &quot;https://api.weather.com/v1/geocode/&lt;latitude&gt;/&lt;longitude&gt;/observations/historical.json?language=&lt;language&gt;&amp;units=&lt;units&gt;&amp;apiKey=&lt;api.key&gt;&amp;startDate=&lt;start.date&gt;&amp;endDate=&lt;end.date&gt;&quot;\n  } else if (API.Location == &quot;postalcode&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n    BaseURL   &lt;- &quot;https://api.weather.com/v1/location/&lt;postal.code&gt;:4:&lt;country&gt;/observations/historical.json?language=&lt;language&gt;&amp;units=&lt;units&gt;&amp;apiKey=&lt;api.key&gt;&amp;startDate=&lt;start.date&gt;&amp;endDate=&lt;end.date&gt;&quot;\n  } else if (API.Location == &quot;stationid&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n    BaseURL &lt;- &quot;https://api.weather.com/v1/location/&lt;station.id&gt;:4:&lt;country&gt;/observations/historical.json?language=&lt;language&gt;&amp;units=&lt;units&gt;&amp;apiKey=&lt;api.key&gt;&amp;startDate=&lt;start.date&gt;&amp;endDate=&lt;end.date&gt;&quot; \n  } else if (API.Location == &quot;geocode&quot; &amp;&amp; API == &quot;Location-Point&quot;) {\n    BaseURL &lt;- &quot;https://api.weather.com/v3/location/point?geocode=&lt;latitudecommalongitude&gt;&amp;language=&lt;language&gt;&amp;format=json&amp;apiKey=&lt;api.key&gt;&quot;\n    \n  } else if (API.Location == &quot;postalcode&quot; &amp;&amp; API == &quot;Location-Point&quot;) {\n    BaseURL &lt;- &quot;https://api.weather.com/v3/location/point?postalKey=&lt;postal.key&gt;&amp;language=&lt;language&gt;&amp;format=json&amp;apiKey=&lt;api.key&gt;&quot;\n    \n  } else {\n    BaseURL = &quot;&quot;\n  }\n  \n  return(BaseURL)\n} ### END RetrieveTWCoBaseURL\n\n\nCreateAppendDFColumnData &lt;- function(column, new.column.name, targetDF, sourceDF) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: CreateAppendDFColumnData\n  # DESCRIPTION: This function seeks to create a data frame or append a \n  # column to it dataframe based on data sent. \n  # \n  #\n  # Args:\n  #   column: a list or data frame column that needs to be part of the data.frame\n  #\n  #   new.column.name: The name to be given to that column when returned in DF\n  #\n  #   targetDF: The data frame where the data can be attached (note this can\n  #   sent without data in the case of a new data frame to be built)\n  #\n  #   sourceDF: If information is being appended from one data frame to another\n  #   the function will take the column, grab it from sourceDF, update the\n  #   the column name and attach it to targetDF\n  #\n  # Returns:\n  #   targetDF: the data frame either created or updated with new the information\n  #   passed to it.     \n  #     \n  # **********************************Header***********************************\n  # -----------------------------------------------------------------------------\n  # -- CONSTANT SET SECTION\n  # -----------------------------------------------------------------------------\n  # -----------------------------------------------------------------------------\n  # -- EXECUTE SECTION\n  # -----------------------------------------------------------------------------  \n  quotedcolumn = quote(column)\n \n  if (missing(targetDF)) {\n    targetDF &lt;- data.frame(column)\n  } else if (missing(sourceDF)) {\n    targetDF &lt;- data.frame(targetDF, column)\n  } else {\n    targetDF &lt;- data.frame(targetDF, sourceDF[,column])\n  }\n  \n  \n  names(targetDF)[ncol(targetDF)] &lt;- new.column.name\n  return(targetDF)\n} ### END CreateAppendDFColumnData\nmodelerData  # DB\nprint(&quot;End Constants and Variables&quot;)  # DB\n# -----------------------------------------------------------------------------\n# -- ERROR HANDLING FUNCTIONS SECTION\n# -----------------------------------------------------------------------------\n# Modeler doesnt appear to handle custom messages, warnings, and conditions,\n# gracefully. For now, we will try to catch them before they occur and print\n# the error in the console log.\n# condition &lt;- function(subclass, message, call = sys.call(-1), ...) {\n#   structure(\n#     class = c(subclass, &quot;condition&quot;),\n#     list(message = message, call = call, ...)\n#   )\n# }\n# \n# # Defines a custom stop function so that issues can be raised to the end user\n# CustomMessageF &lt;- function(subclass, message, call = sys.call(-1), ...) {\n#   kErrorOutputPrefix          &lt;- &quot;TWCoHistoryAdvanced Node Error: &quot;\n#   \n#   c &lt;- condition(c(subclass, &quot;message&quot;), message, call = call, ...)\n# \n#   save.image(file=kDebugImageLocation, safe=FALSE) # DB\n#   print(&quot;DEBUG Image Save End&quot;) # DB\n# \n#   paste(kErrorOutputPrefix, c)\n# #  print(c)\n# \n#   message(c)\n# }\n# _____________________________________________________________________________\nis.TWCoDate  &lt;- function(check.DF, check.start, check.end, check.historyonly = TRUE) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: is.TWCoDate\n  # DESCRIPTION: This function accepts a data frame and will filter it so as to \n  # determine what dates are legal dates. If it finds any dates that are not\n  # legal it will print an error in the console log.\n  # \n  #\n  # Args:\n  #   check.start: Name of the field that is the Start Date\n  #   check.end: Name of the field that is End Date\n  #   check.historyonly: (Boolean: TRUE) - if TRUE will only check for historic \n  #   dates. For weather forecast dates in the future you would choose FALSE.\n  #\n  # Returns:\n  #   check.DF: Data Frame of only rows with valid dates.\n  # **********************************Header***********************************\n  \n  # -----------------------------------------------------------------------------\n  # -- TEST SECTION\n  # -----------------------------------------------------------------------------\n  # check.DF          &lt;- URL.Data\n  # check.start       &lt;- kmodDStartDateColNameConstant\n  # check.end         &lt;- kmodDEndDateColNameConstant\n  # check.historyonly &lt;- TRUE\n  \n  # -----------------------------------------------------------------------------\n  # -- VARIABLE SET SECTION\n  # -----------------------------------------------------------------------------\n  # Earliest date of The Weather Companys observations - January 1931\n  # Earliest date of The Weather Companys observations - January 1931\n  \n  \n  \n  \n  earliest.date &lt;- ymd(19310101)\n  \n  # If check.historyonly is true it will do the latest day + 1 otherwise + 7 days\n  if (check.historyonly) {\n    latest.date &lt;- today() + 1\n  } else {\n    latest.date &lt;- today() + 7\n  }\n  \n  # Convert Start and End dates to date elements. If they are not legal elements\n  # ymd will return NA\n  check.DF[[check.start]] &lt;- ymd(check.DF[[check.start]])\n  check.DF[[check.end]] &lt;- ymd(check.DF[[check.end]])\n  # -----------------------------------------------------------------------------\n  # -- EXCEPTION HANDLING SECTION\n  # -----------------------------------------------------------------------------\n  if (sum(is.na(check.DF[[check.start]]) || is.na(check.DF[[check.end]]), na.rm = TRUE) &gt; 0) {\n    print(&quot;Extension Error: Data Frame contained rows with a either the Start or End Dates that are not a legal date&quot;)\n  }\n  \n  if (sum(check.DF[[check.start]] &gt; check.DF[[check.end]], na.rm = TRUE) &gt; 0) {\n    print(&quot;Extension Error: Data Frame contained rows with an input of Start Date must Be the Same or less than End Date&quot;)\n  }\n  \n  if (sum(check.DF[[check.start]] &lt; earliest.date || check.DF[[check.end]] &lt; earliest.date, na.rm = TRUE) &gt; 0) {\n    print(&quot;Extension Error: Data Frame contained rows with a input of Start or End Date before weather records began (Jan 1931)&quot;)\n  }\n  \n  if (sum(check.DF[[check.start]] &gt; latest.date | check.DF[[check.end]] &gt; latest.date, na.rm = TRUE) &gt; 0) {\n    print(&quot;Extension Error: Data Frame contained rows with a Future Date, No weather records yet&quot;)\n  }\n  \n  # Remove rows that have errors in the date, see exception handling above,\n  # where the start date or end date is NA, the start date, pre-dates end\n  # date and where earliest date is before recording or after the latest \n  # date in the system.\n  check.DF &lt;-    check.DF[!(is.na(check.DF[[check.start]]) \n                       | is.na(check.DF[[check.end]])\n                       | check.DF[[check.start]] &gt; check.DF[[check.end]]\n                       | check.DF[[check.start]] &lt; earliest.date\n                       | check.DF[[check.end]] &lt; earliest.date\n                       | check.DF[[check.start]] &gt; latest.date\n                       | check.DF[[check.end]] &gt; latest.date)\n                       , ]\n                       \n  \n  # Split the data frame in two so that spans of greater than 30 days, TWC\n  # counts the dates as such Jan 31st - Jan 1st would be 31 days as the 31st\n  # returns information, are in the Above30Day, which those that are below\n  # go directly to landing.\n  Above30Day &lt;- check.DF[check.DF[[check.end]] - check.DF[[check.start]]  &gt; 29, ]\n  check.DF   &lt;- check.DF[check.DF[[check.end]] - check.DF[[check.start]]  &lt;= 29, ]\n  \n  if (NROW(Above30Day) &gt; 0) {\n  \n    for(i in 1:NROW(Above30Day)) {\n      # Pull a row out that is above 30 days and create a sequence\n      # so that we have a set of start and end dates that span\n      # 30 days. You now replicate the rows to match the new sequence\n      # and combine back the new start and end dates.\n      To_Test &lt;- Above30Day[i, ]\n      new.start.date &lt;- seq.Date(To_Test[[check.start]],To_Test[[check.end]],by = &quot;30 day&quot;)\n      new.end.date &lt;- (new.start.date + 29)\n      Clean30Day &lt;- rep(To_Test, NROW(new.start.date))\n      Clean30Day$start.date &lt;- new.start.date\n      Clean30Day$end.date &lt;- if_else(Clean30Day$end.date &lt; new.end.date, Clean30Day$end.date, new.end.date)\n      check.DF &lt;- rbind(check.DF, Clean30Day)\n    }\n  }  \n  \n  \n  \n  \n  return(check.DF)\n} ### END is.TWCoDate\nis.LatitudeLongitude &lt;- function(check.DF, check.latitude, check.longitude) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: is.latitudelongitude\n  # DESCRIPTION: This function accepts a latitude and longitude and will return\n  # whether the values contained are legal latitude and longitudes\n  # \n  #\n  # Args:\n  #   check.DF: URL Data Frame to be checked\n  #   check.latitude: Latitude column name\n  #   check.longitude: Longitude column name\n  # Returns:\n  #   check.DF: Corrected Data Frame minus any illegal Lat and Longs \n  #     \n  #     \n  # **********************************Header***********************************\n  \n  # -----------------------------------------------------------------------------\n  # -- CONSTANT SET SECTION\n  # -----------------------------------------------------------------------------\n  # Regular Expression patterns for both Latitude and Longitude\n  # slightly modified version found at this link. \n  # http://stackoverflow.com/questions/3518504/regular-expression-for-matching-latitude-longitude-coordinate  \n  kLatitudePattern  &lt;- &quot;^(\\+|-)?(?:90(?:(?:\\.0{1,9})?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]{1,9})?))$&quot;\n  kLongitudePattern &lt;- &quot;^(\\+|-)?(?:180(?:(?:\\.0{1,6})?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]{1,6})?))$&quot;\n  \n  \n  # -----------------------------------------------------------------------------\n  # -- EXCEPTION HANDLING SECTION\n  # -----------------------------------------------------------------------------  \n  # Check both Latitude and Longitude against the patterns and if both are \n  # legal Latitude and Longitudes return row otherwise remove\n  if (sum(grepl(kLatitudePattern, check.DF[[check.latitude]], perl = TRUE) &amp;\n          grepl(kLongitudePattern, check.DF[[check.longitude]], perl = TRUE)) &lt; nrow(check.DF)){\n    print(&quot;Extension Error: Illegal latitude/longitude combinations present and have been removed&quot;)\n  }\n  # -----------------------------------------------------------------------------\n  # -- EXECUTE SECTION\n  # -----------------------------------------------------------------------------   \n  check.DF &lt;- check.DF[grepl(kLatitudePattern, check.DF[[check.latitude]], perl = TRUE) &amp;\n                       grepl(kLongitudePattern, check.DF[[check.longitude]], perl = TRUE), ]\n  \n  return(check.DF)\n} ### END is.LatitudeLongitude\n\n\n#DEBUG save.image(file=kDebugImageLocation, safe=FALSE) # DB\nprint(&quot;End Error Handling Functions&quot;) # DB\n\nUpdateTWCoURLParameters &lt;- function(update.DF,\n                                    API,\n                                    API.Location,\n                                    URL.col.name,\n                                    language,\n                                    units,\n                                    api.key,\n                                    start.date.col.name,\n                                    end.date.col.name,\n                                    latitude.col.name, #ignored in this function\n                                    longitude.col.name, #ignored in this function\n                                    postal.code.col.name, #ignored in this function\n                                    station.id.col.name, #ignored in this function\n                                    country.code) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: UpdateTWCoURLParameters\n  # DESCRIPTION: This function accepts a data frame and will update all the \n  # parameters for the URL based on the specification laid out by TWC. For \n  # consistency, not all columns will be used, but all are requested.\n  #\n  # Args:\n  #   update.DF: The data frame to be processed.\n  #   API: The API currently called.\n  #   API.Location: What type of location is being requested. Latitude/Longitude\n  #   postal code, or station ID.\n  #   URL.col.name: Name of the column that contains the URL string that needs \n  #   updating\n  #   language: The return language requested by the UI.\n  #   units: The type of units measurements should be returned in: English (US)\n  #   hybrid (UK), metric or metrix - SI units.\n  #   api.key: TWCo API Key sent by the user.\n  #   start.date.col.name: Name of the column with start date.\n  #   end.date.col.name: Name of the column with end date\n  #   latitude.col.name: Name of the column with latitude\n  #   longitude.col.name: Name of the column with longitude\n  #   postal.code.col.name: Name of the column with postal code\n  #   station.id.col.name: Name of the column with Station ID\n  #   country.code: The country code that was populated in the UI if postal code\n  #   is checked.\n  # Returns:\n  #   check.DF: Updated Data Frame \n  #     \n  # **********************************Header***********************************\n  # -----------------------------------------------------------------------------\n  # -- UPDATE PARAMETERS SECTION\n  # -----------------------------------------------------------------------------  \n  if (API == &quot;History-Site&quot;) {\n    # Note: there is no difference in the parameters between geocode, station,  \n    # and postal code versions of the historical site URL scheme.\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;language&quot;, language)\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;units&quot;, units)\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;apiKey&quot;, api.key)\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;startDate&quot;, \n                                 format(update.DF[[start.date.col.name]], &quot;%Y%m%d&quot;))\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;endDate&quot;, \n                                 format(update.DF[[end.date.col.name]], &quot;%Y%m%d&quot;))\n    \n  } else if (API == &quot;Location-Point&quot; &amp;&amp; API.Location == &quot;geocode&quot;) {\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;geocode&quot;, \n                                 paste(latitude.col.name, &quot;,&quot; , longitude.col.name, sep = &quot;&quot;))\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;language&quot;, language)\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;apiKey&quot;, api.key)\n    \n  } else if (API == &quot;Location-Point&quot; &amp;&amp; API.Location == &quot;postalcode&quot;)  {\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;postalKey&quot;, \n                                 paste(update.DF[[postal.code.col.name]], &quot;:&quot; , country.code, sep=&quot;&quot;))\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;language&quot;, language)\n    update.DF[[URL.col.name]] &lt;- param_set(update.DF[[URL.col.name]], &quot;apiKey&quot;, api.key)\n    \n  } else {\n    update.DF &lt;- update.DF\n  }\n  return(update.DF)\n} ### END UpdateTWCoURLParameters\n\n\nUpdateSiteHistoryURLPath &lt;- function(update.DF,\n                                     API,\n                                     API.Location,\n                                     URL.col.name,\n                                     language, #ignored in this function\n                                     units, #ignored in this function\n                                     api.key, #ignored in this function\n                                     start.date.col.name, #ignored in this function\n                                     end.date.col.name, #ignored in this function\n                                     latitude.col.name,\n                                     longitude.col.name,\n                                     postal.code.col.name,\n                                     station.id.col.name,\n                                     country.code) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: UpdateSiteHistoryURLPath\n  # DESCRIPTION: This function accepts a data frame and will update the URL\n  # as necessary in order to prepare the URL for Historical Site so that the\n  # path with be correct. This differs from the URL Parameters function as \n  # URL Tools, HTTR, and other R packages only encapsulate parameter changes,\n  # not path changes. For consistency, not all columns will be used, but all\n  # are requested.\n  #\n  # Args:\n  #   update.DF: The data frame to be processed.\n  #   API: The API currently called.\n  #   API.Location: What type of location is being requested. Latitude/Longitude\n  #   postal code, or station ID.\n  #   URL.col.name: Name of the column that contains the URL string that needs \n  #   updating\n  #   language: The return language requested by the UI.\n  #   units: The type of units measurements should be returned in: English (US)\n  #   hybrid (UK), metric or metrix - SI units.\n  #   api.key: TWCo API Key sent by the user.\n  #   start.date.col.name: Name of the column with start date.\n  #   end.date.col.name: Name of the column with end date\n  #   latitude.col.name: Name of the column with latitude\n  #   longitude.col.name: Name of the column with longitude\n  #   postal.code.col.name: Name of the column with postal code\n  #   station.id.col.name: Name of the column with Station ID\n  #   country.code: The country code that was populated in the UI if postal code\n  #   is checked.\n  # Returns:\n  #   check.DF: Updated Data Frame \n  #     \n  # **********************************Header***********************************\n  # -----------------------------------------------------------------------------\n  # -- CONSTANT SET SECTION\n  # -----------------------------------------------------------------------------\n  # -----------------------------------------------------------------------------\n  # -- EXECUTE SECTION\n  # -----------------------------------------------------------------------------  \n  Base.URL.Temp &lt;- url_parse(update.DF[[URL.col.name]])\n  \n  if (API == &quot;History-Site&quot; &amp;&amp; API.Location == &quot;geocode&quot;) {\n    Base.URL.Temp$path &lt;- paste(&quot;v1/geocode/&quot;, update.DF[[latitude.col.name]], \n  &#9;&#9;       &quot;/&quot;, update.DF[[longitude.col.name]], \n  &#9;&#9;       &quot;/observations/historical.json&quot;,\n  &#9;&#9;       sep=&quot;&quot;)\n  \n  } else if (location.type == &quot;postalcode&quot;) {\n    Base.URL.Temp$path &lt;- paste(&quot;v1/location/&quot;, \n  &#9;&#9;       update.DF[[postal.code.col.name]], &quot;:4:&quot;, \n  &#9;&#9;       country.code, \n  &#9;&#9;       &quot;/observations/historical.json&quot;,\n  &#9;&#9;       sep=&quot;&quot;)\n  \n  } else if (location.type == &quot;stationID&quot;) {\n    Base.URL.Temp$path &lt;- paste(&quot;v1/location/&quot;, \n  &#9;&#9;       update.DF[[kmodDStationIDColNameConstant]], \n  &#9;&#9;       &quot;:1:&quot;, \n  &#9;&#9;       country.code, \n  &#9;&#9;       &quot;/observations/historical.json&quot;, \n  &#9;&#9;       sep=&quot;&quot;)\n  \n  } else {\n    Base.URL.Temp$path &lt;- Base.URL.Temp$path\n  }\n  \n  update.DF[[URL.col.name]] &lt;- url_compose(Base.URL.Temp)\n  return(update.DF)\n} ### END UpdateSiteHistoryURLPath\n\n\nRetrieveTWCoJSON &lt;- function(update.DF,\n                             API,\n                             API.Location,\n                             URL.col.name,\n                             language,\n                             units,\n                             api.key,\n                             start.date.col.name,\n                             end.date.col.name,\n                             latitude.col.name,\n                             longitude.col.name,\n                             postal.code.col.name,\n                             station.id.col.name,\n                             country.code,\n                             tz.type) {\n  # **********************************Header***********************************\n  # FUNCTION NAME: RetrieveTWCoJSON\n  # DESCRIPTION: This function accepts a data frame and based upon a completed\n  # URL contained in the column that is named in the URL.col.name field   \n  # For consistency, not all columns will be used, but all are requested.\n  #\n  # Args:\n  #   update.DF: The data frame to be processed.\n  #   API: The API currently called.\n  #   API.Location: What type of location is being requested. Latitude/Longitude\n  #   postal code, or station ID.\n  #   URL.col.name: Name of the column that contains the URL string that needs \n  #   updating\n  #   language: The return language requested by the UI.\n  #   units: The type of units measurements should be returned in: English (US)\n  #   hybrid (UK), metric or metrix - SI units.\n  #   api.key: TWCo API Key sent by the user.\n  #   start.date.col.name: Name of the column with start date.\n  #   end.date.col.name: Name of the column with end date\n  #   latitude.col.name: Name of the column with latitude\n  #   longitude.col.name: Name of the column with longitude\n  #   postal.code.col.name: Name of the column with postal code\n  #   station.id.col.name: Name of the column with Station ID\n  #   country.code: The country code that was populated in the UI if postal code\n  #   is checked.\n  # Returns:\n  #   check.DF: Updated Data Frame \n  #     \n  #     \n  # http://stackoverflow.com/questions/29997325/successfully-coercing-paginated-json-object-to-r-dataframe    \n  # **********************************Header***********************************\n  # -----------------------------------------------------------------------------\n  # -- CONSTANT SET SECTION\n  # -----------------------------------------------------------------------------\n  # How many rows are in the data frame.\n  Counter.JSONURLs &lt;- NROW(update.DF)\n  \n  # -----------------------------------------------------------------------------\n  # -- EXECUTE SECTION\n  # -----------------------------------------------------------------------------  \n  # This loop goes through each JSON URL, uses the RETRY function in HTTR\n  # and coerces it to JSON for JSONLITE to pick up, flatten, combined, and make \n  # the ending data set.\n  for(i in 1:Counter.JSONURLs) {\n  \n    url &lt;- update.DF[[URL.col.name]][i]\n    \n    Retrieve.Data &lt;- RETRY(&quot;GET&quot;, url)\n    \n    status.code &lt;- Retrieve.Data$status_code\n    \n    Content.Data &lt;- content(Retrieve.Data, as=&quot;text&quot;)\n  # If the API returns anything other than a 200 (Status OK), print the value\n  # Location Data Not Found and return the URL.\n  # TODO(Grant Case): The status codes have data with them on specific errors\n  # update it later with this information.\n    if (status.code != 200){\n      print(paste(&quot;Location Data Not Found for: &quot;, url))\n    \n    } else {\n      resultData_new &lt;- as.data.frame(fromJSON(Content.Data , \n                    simplifyDataFrame = TRUE, simplifyVector = FALSE, \n                    flatten = TRUE))\n      \n              \n        \n        if (API.Location == &quot;geocode&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n            latitude.temp      &lt;- update.DF[[latitude.col.name]][i]\n            longitude.temp     &lt;- update.DF[[longitude.col.name]][i]\n            start.date.temp    &lt;- update.DF[[start.date.col.name]][i]\n            end.date.temp      &lt;- update.DF[[end.date.col.name]][i]\n            \n            resultData_new     &lt;- CreateAppendDFColumnData(latitude.temp, \n                                      latitude.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(longitude.temp, \n                                      longitude.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(start.date.temp, \n                                      start.date.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(end.date.temp, \n                                      end.date.col.name, resultData_new)\n            addcolnum &lt;- 4\n  \n  \n       \n        } else if (API.Location == &quot;postalcode&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n            postal.code.temp   &lt;- update.DF[[postal.code.col.name]][i]\n            start.date.temp    &lt;- update.DF[[start.date.col.name]][i]\n            end.date.temp      &lt;- update.DF[[end.date.col.name]][i]\n   \n            resultData_new     &lt;- CreateAppendDFColumnData(postal.code.temp, \n                                      postal.code.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(start.date.temp, \n                                      start.date.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(end.date.temp, \n                                      end.date.col.name, resultData_new) \n            addcolnum &lt;- 3\n      \n        } else if (API.Location == &quot;stationid&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n            station.id.temp    &lt;- update.DF[[station.id.col.name]][i]\n            start.date.temp    &lt;- update.DF[[start.date.col.name]][i]\n            end.date.temp      &lt;- update.DF[[end.date.col.name]][i]\n   \n            resultData_new     &lt;- CreateAppendDFColumnData(station.id.temp, \n                                      station.id.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(start.date.temp, \n                                      start.date.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(end.date.temp, \n                                      end.date.col.name, resultData_new) \n            addcolnum &lt;- 3\n            \n        } else if (API.Location == &quot;geocode&quot; &amp;&amp; API == &quot;Location-Point&quot;) {\n            latitude.temp      &lt;- update.DF[[latitude.col.name]][i]\n            longitude.temp     &lt;- update.DF[[longitude.col.name]][i]\n            \n            resultData_new     &lt;- CreateAppendDFColumnData(latitude.temp, \n                                      latitude.col.name, resultData_new)\n            resultData_new     &lt;- CreateAppendDFColumnData(longitude.temp, \n                                      longitude.col.name, resultData_new)\n            addcolnum &lt;- 2\n            \n        } else if (API.Location == &quot;postalcode&quot; &amp;&amp; API == &quot;Location-Point&quot;) {\n            postal.code.temp   &lt;- update.DF[[postal.code.col.name]][i]\n   \n            resultData_new     &lt;- CreateAppendDFColumnData(postal.code.temp, \n                                      postal.code.col.name, resultData_new)  \n            addcolnum &lt;- 1\n            \n        } else {\n          resultData_new = resultData_new\n        }\n \n    colnum &lt;- NCOL(resultData_new)\n    resultData_new &lt;- cbind(resultData_new[, (colnum - addcolnum + 1): colnum],\n                            resultData_new[, 1: (colnum - addcolnum)])\n \n    if (exists(&quot;resultData&quot;)) {\n    \n    resultData &lt;- rbind(resultData, resultData_new)\n    \n    } else {\n    \n    resultData &lt;- resultData_new\n    \n    }\n   \n \n    } \n      \n    i &lt;- i + 1\n    colnum    &lt;- NULL\n    addcolnum &lt;- NULL\n  }  \n  return(resultData)\n} ### END RetrieveTWCoJSON\n\n\n# TODO(Grant Case): Code for the timezone shift to be created later\n# Code for future function to move time values to Local time from GMT\n#   if (tz.type  == &quot;GMT&quot;) {\n#     resultData$metadata.expire_time_gmt &lt;- as_datetime(origin + as.integer(resultData$observations.valid_time_gmt))\n#     resultData$observations.valid_time_gmt &lt;- as_datetime(origin + as.integer(resultData$observations.valid_time_gmt))\n#     resultData$observations.expire_time_gmt &lt;- as_datetime(origin + as.integer(resultData$observations.valid_time_gmt))\n#   } else {\n#     resultData$metadata.expire_time_gmt &lt;- as_datetime(origin + as.integer(resultData$observations.valid_time_gmt))\n#     resultData$observations.valid_time_gmt &lt;- as_datetime(origin + as.integer(resultData$observations.valid_time_gmt))\n#     resultData$observations.expire_time_gmt &lt;- as_datetime(origin + as.integer(resultData$observations.valid_time_gmt))\n#   }\n  \n  \nBuildmodelerDataModel &lt;- function(source.DF, API, API.Location) {\n  ########Currently not being Used due to issue with Modeler not liking########\n  ########setting the modelerdataModel in a function.########\n  \n  # **********************************Header***********************************\n  # FUNCTION NAME: BuildmodelerDataModel\n  # DESCRIPTION: This function accepts a dataframe, API and API.Location. It \n  # will then Build the modelerDataModel \n  # \n  #\n  # Args:\n  #   check.DF: Data Frame to be checked\n  #   check.x: Latitude column name\n  #   check.y: Longitude column name\n  # Returns:\n  #   check.DF: Updated Data Frame \n  #     \n  #     \n  # **********************************Header***********************************\n  # -----------------------------------------------------------------------------\n  # -- CONSTANT SET SECTION\n  # -----------------------------------------------------------------------------\n  # -----------------------------------------------------------------------------\n  # -- EXECUTE SECTION\n  # -----------------------------------------------------------------------------  \n  check.DF &lt;- data.frame(c(fieldName=&quot;dummy&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;))\n  names(check.DF)[ncol(check.DF)] &lt;- &quot;dummy&quot;\n  \n  \n    if (API.Location == &quot;geocode&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n      check.DF$latitude     &lt;- c(fieldName=&quot;latitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$longitude    &lt;- c(fieldName=&quot;longitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$start.date   &lt;- c(fieldName=&quot;start.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$end.date     &lt;- c(fieldName=&quot;end.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n     \n    } else if (API.Location == &quot;postalcode&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n      check.DF$postal.code  &lt;- c(fieldName=&quot;postal.code&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$start.date   &lt;- c(fieldName=&quot;start.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$end.date     &lt;- c(fieldName=&quot;end.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      \n    } else if (API.Location == &quot;stationid&quot; &amp;&amp; API == &quot;History-Site&quot;) {\n      check.DF$station.id   &lt;- c(fieldName=&quot;station.id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$start.date   &lt;- c(fieldName=&quot;start.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      check.DF$end.date     &lt;- c(fieldName=&quot;end.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n    \n    } else {\n      check.DF = check.DF\n  }\n  \n  check.DF &lt;- check.DF[2: NCOL(check.DF)]\n  check.DF$metadata.language                      &lt;- c(fieldName=&quot;metadata.language&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$metadata.transaction_id                &lt;- c(fieldName=&quot;metadata.transaction_id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$metadata.version                       &lt;- c(fieldName=&quot;metadata.version&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;integer&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  \n  \n  if (API.Location == &quot;geocode&quot;) {\n    check.DF$metadata.latitude     &lt;- c(fieldName=&quot;metadata.latitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n    check.DF$metadata.longitude    &lt;- c(fieldName=&quot;metadata.longitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;) \n  } else {\n    check.DF$metadata.location_id                   &lt;- c(fieldName=&quot;metadata.location_id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  }\n  \n  \n  \n  check.DF$metadata.units                         &lt;- c(fieldName=&quot;metadata.units&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$metadata.expire_time_gmt               &lt;- c(fieldName=&quot;metadata.expire_time_gmt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;timestamp&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$metadata.status_code                   &lt;- c(fieldName=&quot;metadata.status_code&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;integer&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.key                       &lt;- c(fieldName=&quot;observations.key&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.class                     &lt;- c(fieldName=&quot;observations.class&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.expire_time_gmt           &lt;- c(fieldName=&quot;observations.expire_time_gmt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;timestamp&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.obs_id                    &lt;- c(fieldName=&quot;observations.obs_id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.obs_name                  &lt;- c(fieldName=&quot;observations.obs_name&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.valid_time_gmt            &lt;- c(fieldName=&quot;observations.valid_time_gmt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;timestamp&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.day_ind                   &lt;- c(fieldName=&quot;observations.day_ind&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.temp                      &lt;- c(fieldName=&quot;observations.temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.wx_icon                   &lt;- c(fieldName=&quot;observations.wx_icon&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.icon_extd                 &lt;- c(fieldName=&quot;observations.icon_extd&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.wx_phrase                 &lt;- c(fieldName=&quot;observations.wx_phrase&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.pressure_tend             &lt;- c(fieldName=&quot;observations.pressure_tend&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.pressure_desc             &lt;- c(fieldName=&quot;observations.pressure_desc&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.dewPt                     &lt;- c(fieldName=&quot;observations.dewPt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.heat_index                &lt;- c(fieldName=&quot;observations.heat_index&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.rh                        &lt;- c(fieldName=&quot;observations.rh&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.pressure                  &lt;- c(fieldName=&quot;observations.pressure&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.vis                       &lt;- c(fieldName=&quot;observations.vis&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.wc                        &lt;- c(fieldName=&quot;observations.wc&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.wdir                      &lt;- c(fieldName=&quot;observations.wdir&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.wdir_cardinal             &lt;- c(fieldName=&quot;observations.wdir_cardinal&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.gust                      &lt;- c(fieldName=&quot;observations.gust&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.wspd                      &lt;- c(fieldName=&quot;observations.wspd&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.max_temp                  &lt;- c(fieldName=&quot;observations.max_temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.min_temp                  &lt;- c(fieldName=&quot;observations.min_temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.precip_total              &lt;- c(fieldName=&quot;observations.precip_total&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.precip_hrly               &lt;- c(fieldName=&quot;observations.precip_hrly&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.snow_hrly                 &lt;- c(fieldName=&quot;observations.snow_hrly&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.uv_desc                   &lt;- c(fieldName=&quot;observations.uv_desc&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.feels_like                &lt;- c(fieldName=&quot;observations.feels_like&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.uv_index                  &lt;- c(fieldName=&quot;observations.uv_index&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.qualifier                 &lt;- c(fieldName=&quot;observations.qualifier&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.qualifier_svrty           &lt;- c(fieldName=&quot;observations.qualifier_svrty&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.blunt_phrase              &lt;- c(fieldName=&quot;observations.blunt_phrase&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.terse_phrase              &lt;- c(fieldName=&quot;observations.terse_phrase&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  check.DF$observations.clds                      &lt;- c(fieldName=&quot;observations.clds&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.water_temp                &lt;- c(fieldName=&quot;observations.water_temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.primary_wave_period       &lt;- c(fieldName=&quot;observations.primary_wave_period&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.primary_wave_height       &lt;- c(fieldName=&quot;observations.primary_wave_height&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.primary_swell_period      &lt;- c(fieldName=&quot;observations.primary_swell_period&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.pprimary_swell_height     &lt;- c(fieldName=&quot;observations.primary_swell_height&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.primary_swell_direction   &lt;- c(fieldName=&quot;observations.primary_swell_direction&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.secondary_swell_period    &lt;- c(fieldName=&quot;observations.secondary_swell_period&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.secondary_swell_height    &lt;- c(fieldName=&quot;observations.secondary_swell_height&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  check.DF$observations.secondary_swell_direction &lt;- c(fieldName=&quot;observations.secondary_swell_direction&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  Source.Column.Cnt &lt;- NCOL(source.DF)\n  MDM.Column.Cnt &lt;- NCOL(check.DF)\n  \n  if (Source.Column.Cnt != MDM.Column.Cnt) {\n    print(&quot;Extension Error: The total number of columns between the modelerDataModel and modelerData do not match.&quot;)\n    print(&quot;Extension Error: This import will fail as a result.&quot;)\n    print(&quot;Extension Error: Compare to see which column(s) are out as a result&quot;)\n  \n  }\n  \n#     T_MD  &lt;- t(head(source.DF,2))\n#     T_MDM &lt;- t(head(check.DF,6))\n#     print(T_MD)\n#     print(T_MDM)\n# T_MD_MDM &lt;- cbind(T_MDM,T_MD)    \n    \n  return(check.DF)\n} ### END BuildmodelerDataModel\n\n\n\n#DEBUG save.image(file=kDebugImageLocation, safe=FALSE) # DB\nprint(&quot;End Node-Specific Functions&quot;) # DB\n\n\n\n\n\n\n\n\n\n# -----------------------------------------------------------------------------\n# -- BUILD URL DATA FRAME\n# -----------------------------------------------------------------------------\n# Based on types chosen in UI, grab the approriate URL template and start\n# dataset\n\nURL.Data &lt;- CreateAppendDFColumnData(RetrieveTWCoBaseURL(location.type,kAPIHistorySite),kBaseURLColNameConstant)\n# Based on what the location type is Lat/Long, Postal Code, or Station ID(unused)\n# add that to the URL\nif (location.type == &quot;geocode&quot;) {\n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.latitude.name, \n                                         kmodDLatitudeColNameConstant, \n                                         URL.Data, modelerData)\n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.longitude.name, \n                                         kmodDLongitudeColNameConstant, \n                                         URL.Data, modelerData)\n                                                                              \n                                         \n} else if (location.type == &quot;postalcode&quot;) {\n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.postalcode.name, \n                                        kmodDPostalCodeColNameConstant, \n                                        URL.Data, modelerData)\n  \n                                        \n} else if (location.type == &quot;stationID&quot;) {\n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.postalcode.name, \n                                         kmodDPostalCodeColNameConstant, \n                                         URL.Data, modelerData)  \n} else {\n  URL.Data &lt;- URL.Data\n}\n# Add the date column or date inputs\nif (date.input.type == &quot;is_variable&quot;) {\n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.startdate.name, \n                                       kmodDStartDateColNameConstant, \n                                       URL.Data, \n                                       modelerData)\n                                       \n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.enddate.name, \n                                       kmodDEndDateColNameConstant, \n                                       URL.Data, \n                                       modelerData)\n                                       \n} else if (date.input.type == &quot;is_textinput&quot;) {\n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.startdate.value, \n                                       kmodDStartDateColNameConstant, \n                                       URL.Data)\n                                       \n  URL.Data &lt;- CreateAppendDFColumnData(dialog.column.enddate.value, \n                                       kmodDEndDateColNameConstant, \n                                       URL.Data)\n} else {\n  URL.Data &lt;- URL.Data\n}\n# Grab the location URL\n# TODO(Grant Case): Add a way for the UI to select to place times in local time and use code to grab the URL.\nURL.Data &lt;- CreateAppendDFColumnData(RetrieveTWCoBaseURL(location.type,\n                                                         kAPILocation),\n                                     kBaseLocationURLColNameConstant, URL.Data)\n# Depending on dataset you could have many URLs that would the same and give duplicate date, filter only unique records\nURL.Data &lt;- unique(URL.Data)\n# Run the function to determine if there are any dates that need to be weeded \n# out (doesnt return conditions as Modeler apparently hates conditions so \n# we are using PRINT into the log to find the error)\ntryCatch(\nURL.Data &lt;- is.TWCoDate (URL.Data, kmodDStartDateColNameConstant, kmodDEndDateColNameConstant, check.historyonly = TRUE),\n                         Invalid_Date = function(c) paste(kErrorOutputPrefix, &quot;Either the Start or End Dates are not legal&quot;),\n                         Invalid_Start_End = function(c) paste(kErrorOutputPrefix, &quot;Input of Start Date must be the same or less than End Date&quot;),\n                         Invalid_Too_Early = function(c) paste(kErrorOutputPrefix, &quot;Input of Start or End Date before weather records began - Jan 1931&quot;),\n                         Invalid_Future_Date = function(c) paste(kErrorOutputPrefix, &quot;Input of Future Date, No weather records yet&quot;)\n)\n# Run the function to determine if there are any lat/longs that need to be \n# weeded out (doesnt return conditions as Modeler apparently hates \n# conditions so we are using PRINT into the log to find the error)\nif (location.type == &quot;geocode&quot;) {\n  tryCatch(\n    URL.Data &lt;- is.LatitudeLongitude (URL.Data, kmodDLatitudeColNameConstant, kmodDLongitudeColNameConstant),\n                                     Invalid_Latitude_Longitude = function(c) paste(kErrorOutputPrefix, &quot;Data Frame contained rows with an illegal lattitude or longitude&quot;)\n  )\n}\n# -----------------------------------------------------------------------------\n# -- BUILD BASE URL STRINGS\n# -----------------------------------------------------------------------------\n# Update the URL path for the calls as URLTools does not include a parameter\n# to set those to our specification\nURL.Data &lt;- UpdateSiteHistoryURLPath (URL.Data,\n                                      kAPIHistorySite,\n                                      location.type,\n                                      kBaseURLColNameConstant,\n                                      dialog.column.language,\n                                      dialog.column.units,\n                                      dialog.column.apikey,\n                                      kmodDStartDateColNameConstant,\n                                      kmodDEndDateColNameConstant,\n                                      kmodDLatitudeColNameConstant,\n                                      kmodDLongitudeColNameConstant,\n                                      kmodDPostalCodeColNameConstant,\n                                      kmodDStationIDColNameConstant,\n                                      dialog.column.countrycode)\n                          \n# Update the URL parameters with URLTools package\nURL.Data &lt;- UpdateTWCoURLParameters  (URL.Data,\n                                      kAPIHistorySite,\n                                      location.type,\n                                      kBaseURLColNameConstant,\n                                      dialog.column.language,\n                                      dialog.column.units,\n                                      dialog.column.apikey,\n                                      kmodDStartDateColNameConstant,\n                                      kmodDEndDateColNameConstant,\n                                      kmodDLatitudeColNameConstant,\n                                      kmodDLongitudeColNameConstant,\n                                      kmodDPostalCodeColNameConstant,\n                                      kmodDStationIDColNameConstant,\n                                      dialog.column.countrycode)\n# Update the URL parameters for Location-based API.\n# Future: Invoked but not used in the final product                                    \nURL.Data &lt;- UpdateTWCoURLParameters  (URL.Data,\n                                      kAPILocation,\n                                      location.type,\n                                      kBaseLocationURLColNameConstant,\n                                      dialog.column.language,\n                                      dialog.column.units,\n                                      dialog.column.apikey,\n                                      kmodDStartDateColNameConstant,\n                                      kmodDEndDateColNameConstant,\n                                      kmodDLatitudeColNameConstant,\n                                      kmodDLongitudeColNameConstant,\n                                      kmodDPostalCodeColNameConstant,\n                                      kmodDStationIDColNameConstant,\n                                      dialog.column.countrycode)\n# Check Uniqueness One Last Time\nURL.Data &lt;- unique(URL.Data)\n# Retrieve and create the modelerData that will be returned to Modeler\nmodelerData &lt;- RetrieveTWCoJSON (URL.Data,\n                                      kAPIHistorySite,\n                                      location.type,\n                                      kBaseURLColNameConstant,\n                                      dialog.column.language,\n                                      dialog.column.units,\n                                      dialog.column.apikey,\n                                      kmodDStartDateColNameConstant,\n                                      kmodDEndDateColNameConstant,\n                                      kmodDLatitudeColNameConstant,\n                                      kmodDLongitudeColNameConstant,\n                                      kmodDPostalCodeColNameConstant,\n                                      kmodDStationIDColNameConstant,\n                                      dialog.column.countrycode,\n                                      timezone.type)\n# ****************************************************************************\n# ****************************************************************************\n# Build modelerDataModel\n# ****************************************************************************\n  modelerDataModel &lt;- data.frame(c(fieldName=&quot;dummy&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;))\n  names(modelerDataModel)[ncol(modelerDataModel)] &lt;- &quot;dummy&quot;\n  \n  \n    if (location.type == &quot;geocode&quot;) {\n      modelerDataModel$latitude     &lt;- c(fieldName=&quot;latitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$longitude    &lt;- c(fieldName=&quot;longitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$start.date   &lt;- c(fieldName=&quot;start.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$end.date     &lt;- c(fieldName=&quot;end.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n     \n    } else if (location.type == &quot;postalcode&quot;) {\n      modelerDataModel$postal.code  &lt;- c(fieldName=&quot;postal.code&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$start.date   &lt;- c(fieldName=&quot;start.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$end.date     &lt;- c(fieldName=&quot;end.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      \n    } else if (location.type == &quot;stationid&quot;) {\n      modelerDataModel$station.id   &lt;- c(fieldName=&quot;station.id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$start.date   &lt;- c(fieldName=&quot;start.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n      modelerDataModel$end.date     &lt;- c(fieldName=&quot;end.date&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;date&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n    \n    } else {\n      modelerDataModel = modelerDataModel\n  }\n  \n  modelerDataModel &lt;- modelerDataModel[2: NCOL(modelerDataModel)]\n  modelerDataModel$metadata.language                      &lt;- c(fieldName=&quot;metadata.language&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$metadata.transaction_id                &lt;- c(fieldName=&quot;metadata.transaction_id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$metadata.version                       &lt;- c(fieldName=&quot;metadata.version&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;integer&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  \n  \n  if (location.type == &quot;geocode&quot;) {\n    modelerDataModel$metadata.latitude     &lt;- c(fieldName=&quot;metadata.latitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n    modelerDataModel$metadata.longitude    &lt;- c(fieldName=&quot;metadata.longitude&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;) \n  } else {\n    modelerDataModel$metadata.location_id                   &lt;- c(fieldName=&quot;metadata.location_id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  }\n  \n  \n  \n  modelerDataModel$metadata.units                         &lt;- c(fieldName=&quot;metadata.units&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$metadata.expire_time_gmt               &lt;- c(fieldName=&quot;metadata.expire_time_gmt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;timestamp&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$metadata.status_code                   &lt;- c(fieldName=&quot;metadata.status_code&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;integer&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.key                       &lt;- c(fieldName=&quot;observations.key&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.class                     &lt;- c(fieldName=&quot;observations.class&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.expire_time_gmt           &lt;- c(fieldName=&quot;observations.expire_time_gmt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;timestamp&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.obs_id                    &lt;- c(fieldName=&quot;observations.obs_id&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.obs_name                  &lt;- c(fieldName=&quot;observations.obs_name&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.valid_time_gmt            &lt;- c(fieldName=&quot;observations.valid_time_gmt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;timestamp&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.day_ind                   &lt;- c(fieldName=&quot;observations.day_ind&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.temp                      &lt;- c(fieldName=&quot;observations.temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.wx_icon                   &lt;- c(fieldName=&quot;observations.wx_icon&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.icon_extd                 &lt;- c(fieldName=&quot;observations.icon_extd&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.wx_phrase                 &lt;- c(fieldName=&quot;observations.wx_phrase&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.pressure_tend             &lt;- c(fieldName=&quot;observations.pressure_tend&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.pressure_desc             &lt;- c(fieldName=&quot;observations.pressure_desc&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.dewPt                     &lt;- c(fieldName=&quot;observations.dewPt&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.heat_index                &lt;- c(fieldName=&quot;observations.heat_index&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.rh                        &lt;- c(fieldName=&quot;observations.rh&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.pressure                  &lt;- c(fieldName=&quot;observations.pressure&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.vis                       &lt;- c(fieldName=&quot;observations.vis&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.wc                        &lt;- c(fieldName=&quot;observations.wc&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.wdir                      &lt;- c(fieldName=&quot;observations.wdir&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.wdir_cardinal             &lt;- c(fieldName=&quot;observations.wdir_cardinal&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.gust                      &lt;- c(fieldName=&quot;observations.gust&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.wspd                      &lt;- c(fieldName=&quot;observations.wspd&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.max_temp                  &lt;- c(fieldName=&quot;observations.max_temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.min_temp                  &lt;- c(fieldName=&quot;observations.min_temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.precip_total              &lt;- c(fieldName=&quot;observations.precip_total&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.precip_hrly               &lt;- c(fieldName=&quot;observations.precip_hrly&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.snow_hrly                 &lt;- c(fieldName=&quot;observations.snow_hrly&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.uv_desc                   &lt;- c(fieldName=&quot;observations.uv_desc&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.feels_like                &lt;- c(fieldName=&quot;observations.feels_like&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.uv_index                  &lt;- c(fieldName=&quot;observations.uv_index&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.qualifier                 &lt;- c(fieldName=&quot;observations.qualifier&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.qualifier_svrty           &lt;- c(fieldName=&quot;observations.qualifier_svrty&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.blunt_phrase              &lt;- c(fieldName=&quot;observations.blunt_phrase&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.terse_phrase              &lt;- c(fieldName=&quot;observations.terse_phrase&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;,   fieldRole=&quot;&quot;)\n  modelerDataModel$observations.clds                      &lt;- c(fieldName=&quot;observations.clds&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;string&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.water_temp                &lt;- c(fieldName=&quot;observations.water_temp&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.primary_wave_period       &lt;- c(fieldName=&quot;observations.primary_wave_period&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.primary_wave_height       &lt;- c(fieldName=&quot;observations.primary_wave_height&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.primary_swell_period      &lt;- c(fieldName=&quot;observations.primary_swell_period&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.pprimary_swell_height     &lt;- c(fieldName=&quot;observations.primary_swell_height&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.primary_swell_direction   &lt;- c(fieldName=&quot;observations.primary_swell_direction&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.secondary_swell_period    &lt;- c(fieldName=&quot;observations.secondary_swell_period&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.secondary_swell_height    &lt;- c(fieldName=&quot;observations.secondary_swell_height&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  modelerDataModel$observations.secondary_swell_direction &lt;- c(fieldName=&quot;observations.secondary_swell_direction&quot;, fieldLabel=&quot;&quot;, fieldStorage=&quot;real&quot;, fieldMeasure=&quot;&quot;, fieldFormat=&quot;&quot;, fieldRole=&quot;&quot;)\n  Source.Column.Cnt &lt;- NCOL(modelerData)\n  MDM.Column.Cnt &lt;- NCOL(modelerDataModel)\n  \n  if (Source.Column.Cnt != MDM.Column.Cnt) {\n    print(&quot;Extension Error: The total number of columns between the modelerDataModel and modelerData do not match.&quot;)\n    print(&quot;Extension Error: This import will fail as a result.&quot;)\n    print(&quot;Extension Error: Compare to see which column(s) are out as a result&quot;)\n  \n  }\n# ****************************************************************************\n# ****************************************************************************\n# ****************************************************************************\n# \n# modelerDataModel &lt;- as.data.frame(BuildmodelerDataModel(modelerData_Temp, \n#                                           kAPIHistorySite, \n#                                           location.type))\n# modelerData &lt;- as.data.frame(modelerData_Temp)\n# rm(list= ls()[!(ls() %in% c('modelerData','modelerDataModel','ibmspsscfpkg.connections',\n#                            'ibmspsscfpkg.fileNamesList','ibmspsscfpkg.htmlFilesCount',\n#                            'ibmspsscfpkg.oldwd','ibmspsscfpkg.zipFileNames','kDebugImageLocation'))]) \n\n\nsave.image(file=kDebugImageLocation, safe=FALSE) # DB" name="script" valueType="string"/>
      <Property defaultValue="false" name="canScore" valueType="boolean"/>
      <Property defaultValue="" name="scoringScript" valueType="string"/>
      <Property defaultValue="[R]" name="addOns" valueType="string"/>
      <Property defaultValue="false" name="isModal" valueType="boolean"/>
      <Property defaultValue="R" name="scriptType" valueType="string"/>
      <Property defaultValue="PROCESS" name="nodeType" valueType="string"/>
      <Property defaultValue="RECORDOPS" name="paletteType" valueType="string"/>
      <Property defaultValue="TWC_logo_MAIN.gif" name="_nodeIcon"/>
      <Property defaultValue="%%ThisValue%%" name="tab_API_syntax" valueType="string"/>
      <Property defaultValue="" name="item_apikey" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="item_apikey_syntax" valueType="string"/>
      <Property defaultValue="R" name="item_apikey_quoteType" valueType="string"/>
      <Property defaultValue="reanalysis" name="item_50" type="item_50"/>
      <Property defaultValue="%%ThisValue%%" name="item_50_syntax" valueType="string"/>
      <Property defaultValue="R" name="item_50_quoteType" valueType="string"/>
      <Property defaultValue="item_20_1" name="item_unit" type="item_unit"/>
      <Property defaultValue="e" name="item_20_1_syntax" valueType="string"/>
      <Property defaultValue="m" name="item_20_2_syntax" valueType="string"/>
      <Property defaultValue="s" name="item_20_4_syntax" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="item_unit_syntax" valueType="string"/>
      <Property defaultValue="R" name="item_unit_quoteType" valueType="string"/>
      <Property defaultValue="en-US" name="item_results_language" type="item_results_language"/>
      <Property defaultValue="%%ThisValue%%" name="item_results_language_syntax" valueType="string"/>
      <Property defaultValue="R" name="item_results_language_quoteType" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="item_40_syntax" valueType="string"/>
      <Property name="item_startdate" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_startdate_syntax" valueType="string"/>
      <Property name="item_enddate" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_enddate_syntax" valueType="string"/>
      <Property defaultValue="item_startdate;item_enddate" name="item_40_children" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="item_adjust_intraday_syntax" valueType="string"/>
      <Property defaultValue="false" name="item_43" valueType="boolean"/>
      <Property defaultValue="%%ThisValue%%±" name="item_43_syntax" valueType="string"/>
      <Property defaultValue="0" max="23" min="0" name="item_start_hh" valueType="integer"/>
      <Property defaultValue="%%ThisValue%%" name="item_start_hh_syntax" valueType="string"/>
      <Property defaultValue="0" max="59" min="0" name="item_start_mm" valueType="integer"/>
      <Property defaultValue="%%ThisValue%%" name="item_start_mm_syntax" valueType="string"/>
      <Property defaultValue="0" max="59" min="0" name="item_start_ss" valueType="integer"/>
      <Property defaultValue="%%ThisValue%%" name="item_start_ss_syntax" valueType="string"/>
      <Property defaultValue="23" max="23" min="0" name="item_end_hh" valueType="integer"/>
      <Property defaultValue="%%ThisValue%%" name="item_end_hh_syntax" valueType="string"/>
      <Property defaultValue="59" max="59" min="0" name="item_end_mm" valueType="integer"/>
      <Property defaultValue="%%ThisValue%%" name="item_end_mm_syntax" valueType="string"/>
      <Property defaultValue="59" max="59" min="0" name="item_end_ss" valueType="integer"/>
      <Property defaultValue="%%ThisValue%%" name="item_end_ss_syntax" valueType="string"/>
      <Property defaultValue="item_43;item_84;item_start_hh;item_start_mm;item_start_ss;item_83;item_end_hh;item_end_mm;item_end_ss" name="item_adjust_intraday_children" valueType="string"/>
      <Property defaultValue="item_19_a" name="item_locationtype" type="item_locationtype"/>
      <Property defaultValue="%%ThisValue%%" name="item_locationtype_syntax" valueType="string"/>
      <Property defaultValue="true" name="item_19_a_hasSubGroup"/>
      <Property name="item_lat" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_lat_syntax" valueType="string"/>
      <Property name="item_lon" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_lon_syntax" valueType="string"/>
      <Property name="item_lat_nw" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_lat_nw_syntax" valueType="string"/>
      <Property name="item_lon_nw" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_lon_nw_syntax" valueType="string"/>
      <Property defaultValue="&quot;geocode&quot;" name="item_19_a_syntax" valueType="string"/>
      <Property defaultValue="true" name="item_19_b_hasSubGroup"/>
      <Property defaultValue="US" name="item_countrycode" type="item_countrycode"/>
      <Property defaultValue="%%ThisValue%%" name="item_countrycode_syntax" valueType="string"/>
      <Property defaultValue="R" name="item_countrycode_quoteType" valueType="string"/>
      <Property name="item_postalcode" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_postalcode_syntax" valueType="string"/>
      <Property defaultValue="&quot;postalcode&quot;" name="item_19_b_syntax" valueType="string"/>
      <Property defaultValue="true" name="item_19_c_hasSubGroup"/>
      <Property name="item_icao" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_icao_syntax" valueType="string"/>
      <Property defaultValue="&quot;icao&quot;" name="item_19_c_syntax" valueType="string"/>
      <Property defaultValue="true" name="item_19_d_hasSubGroup"/>
      <Property name="item_iata" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_iata_syntax" valueType="string"/>
      <Property defaultValue="&quot;iata&quot;" name="item_19_d_syntax" valueType="string"/>
      <Property defaultValue="true" name="item_19_e_hasSubGroup"/>
      <Property name="item_place_id" valueType="fieldName"/>
      <Property defaultValue="%%ThisValue%%" name="item_place_id_syntax" valueType="string"/>
      <Property defaultValue="&quot;placeid&quot;" name="item_19_e_syntax" valueType="string"/>
      <Property defaultValue="item_51_a" name="item_geospatial_query_type" type="item_geospatial_query_type"/>
      <Property defaultValue="%%ThisValue%%" name="item_geospatial_query_type_syntax" valueType="string"/>
      <Property defaultValue="false" name="item_51_a_hasSubGroup"/>
      <Property defaultValue="&quot;nearest&quot;" name="item_51_a_syntax" valueType="string"/>
      <Property defaultValue="false" name="item_51_b_hasSubGroup"/>
      <Property defaultValue="&quot;weighted&quot;" name="item_51_b_syntax" valueType="string"/>
      <Property defaultValue="true" name="item_51_c_hasSubGroup"/>
      <Property defaultValue="" name="item_88" valueType="double"/>
      <Property defaultValue="%%ThisValue%%" name="item_88_syntax" valueType="string"/>
      <Property defaultValue="&quot;radius&quot;" name="item_51_c_syntax" valueType="string"/>
      <Property defaultValue="false" name="item_51_d_hasSubGroup"/>
      <Property defaultValue="&quot;bbox&quot;" name="item_51_d_syntax" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="tab_intraday_syntax" valueType="string"/>
      <Property defaultValue="" name="control_1" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="control_1_syntax" valueType="string"/>
      <Property defaultValue="R" name="control_1_quoteType" valueType="string"/>
      <Property defaultValue="" name="control_3" valueType="string"/>
      <Property defaultValue="%%ThisValue%%" name="control_3_syntax" valueType="string"/>
      <Property defaultValue="R" name="control_3_quoteType" valueType="string"/>
    </Properties>
    <Interactors>
      <Interactor context="rinteractor" id="rinteractor"/>
    </Interactors>
    <UserInterface swingPeerClass="com.spss.shared.custom_gui.ui_builder.peers.RStatsUIPeer">
      <Icons>
        <Icon resourceKey="TWCoHistoryOnDemand.modelicon" type="standardNode"/>
      </Icons>
      <Tabs>
        <Tab helpLink="[nativeHelp][com.ibm.spss.r.doc/clementine]uibuilder_helpbutton" resourceKey="tab_API">
          <PropertiesPanel>
            <Layout anchor="northwest" columnWeight="1.0" fill="both" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" rowWeight="1.0"/>
            <PropertiesPanel id="leftPanel">
              <Layout anchor="firstLineStart" columnWeight="1.0" fill="horizontal" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" rowWeight="1.0"/>
              <TextBoxControl labelAbove="true" property="item_apikey" resourceKey="item_apikey">
                <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/>
                <Required borderTitleKey="item_apikey.WARNING">
                  <ControlCondition control="item_apikey" op="isEmpty" value="true"/>
                </Required>
              </TextBoxControl>
              <ComboBoxControl editable="false" labelAbove="true" property="item_50" resourceKey="item_50">
                <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="2" gridWidth="1" rowWeight="0.0"/>
              </ComboBoxControl>
              <ComboBoxControl editable="false" labelAbove="true" property="item_unit" resourceKey="item_unit">
                <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="4" gridWidth="1" rowWeight="0.0"/>
              </ComboBoxControl>
              <ComboBoxControl editable="false" labelAbove="true" property="item_results_language" resourceKey="item_results_language">
                <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="6" gridWidth="1" rowWeight="0.0"/>
              </ComboBoxControl>
              <PropertiesPanel borderTitleKey="item_40" borderType="etched" id="item_40">
                <Layout anchor="northwest" columnWeight="1.0" fill="both" gridColumn="0" gridRow="8" gridWidth="1" rowWeight="1.0"/>
                <SingleFieldChooserControl labelAbove="true" property="item_startdate" resourceKey="item_startdate" showLabel="true" storage="[date time]">
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/>
                </SingleFieldChooserControl>
                <SingleFieldChooserControl labelAbove="true" property="item_enddate" resourceKey="item_enddate" showLabel="true" storage="[date time]">
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="3" gridWidth="1" rowWeight="0.0"/>
                </SingleFieldChooserControl>
              </PropertiesPanel>

            </PropertiesPanel>
            <PropertiesPanel id="middlePanel">
              <Layout anchor="firstLineStart" columnWeight="1.0" fill="horizontal" gridColumn="1" gridHeight="1" gridRow="0" gridWidth="1" rowWeight="1.0"/>
              <PropertiesPanel borderTitleKey="item_locationtype" borderType="etched">
                <Layout anchor="northwest" columnWeight="1.0" fill="both" gridColumn="1" gridRow="2" gridWidth="1" rowWeight="1.0"/>
                <RadioButtonGroupControl labelAbove="true" property="item_locationtype" resourceKey="item_locationtype" rows="5" useSubPanel="false">
                  <RadioButton value="item_19_a">
                    <SingleFieldChooserControl labelAbove="true" property="item_lat" resourceKey="item_lat" showLabel="true" storage="[real integer]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" leftIndent="4" rowWeight="0.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_a"/>
                      </Enabled>
                    </SingleFieldChooserControl>
                    <SingleFieldChooserControl labelAbove="true" property="item_lon" resourceKey="item_lon" showLabel="true" storage="[real integer]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="3" gridWidth="1" leftIndent="4" rowWeight="0.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_a"/>
                      </Enabled>
                    </SingleFieldChooserControl>
                    <SingleFieldChooserControl labelAbove="true" property="item_lat_nw" resourceKey="item_lat_nw" showLabel="true" storage="[real integer]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="6" gridWidth="1" leftIndent="4" rowWeight="0.0"/>
                      <Enabled>
                        <And>
                          <ControlCondition control="item_geospatial_query_type" op="equals" value="item_51_d"/>
                          <ControlCondition control="item_locationtype" op="equals" value="item_19_a"/>
                        </And>
                      </Enabled>
                    </SingleFieldChooserControl>
                    <SingleFieldChooserControl labelAbove="true" property="item_lon_nw" resourceKey="item_lon_nw" showLabel="true" storage="[real integer]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="9" gridWidth="1" leftIndent="4" rowWeight="1.0"/>
                      <Enabled>
                        <And>
                          <ControlCondition control="item_geospatial_query_type" op="equals" value="item_51_d"/>
                          <ControlCondition control="item_locationtype" op="equals" value="item_19_a"/>
                        </And>
                      </Enabled>
                    </SingleFieldChooserControl>
                  </RadioButton>
                  <RadioButton value="item_19_b">
                    <ComboBoxControl editable="false" labelAbove="true" property="item_countrycode" resourceKey="item_countrycode">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" leftIndent="4" rowWeight="0.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_b"/>
                      </Enabled>
                    </ComboBoxControl>
                    <SingleFieldChooserControl labelAbove="false" property="item_postalcode" resourceKey="item_postalcode" showLabel="false" storage="[string]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="3" gridWidth="1" leftIndent="4" rowWeight="1.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_b"/>
                      </Enabled>
                    </SingleFieldChooserControl>
                  </RadioButton>
                  <RadioButton value="item_19_c">
                    <SingleFieldChooserControl labelAbove="false" property="item_icao" resourceKey="item_icao" showLabel="false" storage="[real integer date time string]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" leftIndent="4" rowWeight="1.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_c"/>
                      </Enabled>
                    </SingleFieldChooserControl>
                  </RadioButton>
                  <RadioButton value="item_19_d">
                    <SingleFieldChooserControl labelAbove="true" property="item_iata" resourceKey="item_iata" showLabel="false" storage="[string]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" leftIndent="4" rowWeight="1.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_d"/>
                      </Enabled>
                    </SingleFieldChooserControl>
                  </RadioButton>
                  <RadioButton value="item_19_e">
                    <SingleFieldChooserControl labelAbove="true" property="item_place_id" resourceKey="item_place_id" showLabel="false" storage="[real integer date time string]">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" leftIndent="4" rowWeight="1.0"/>
                      <Enabled>
                        <ControlCondition control="item_locationtype" op="equals" value="item_19_e"/>
                      </Enabled>
                    </SingleFieldChooserControl>
                  </RadioButton>
                  <Layout gridHeight="10" gridWidth="1" rowIncrement="1"/>
                </RadioButtonGroupControl>
              </PropertiesPanel>
              <PropertiesPanel borderTitleKey="item_geospatial_query_type" borderType="etched">
                <Layout anchor="northwest" columnWeight="1.0" fill="both" gridColumn="1" gridRow="0" gridWidth="1" rowWeight="1.0"/>
                <RadioButtonGroupControl labelAbove="true" property="item_geospatial_query_type" resourceKey="item_geospatial_query_type" rows="4" useSubPanel="false">
                  <RadioButton value="item_51_a"/>
                  <RadioButton value="item_51_b"/>
                  <RadioButton value="item_51_c">
                    <TextBoxControl labelAbove="true" property="item_88" resourceKey="item_88">
                      <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" leftIndent="4" rowWeight="1.0"/>
                      <Enabled>
                        <ControlCondition control="item_geospatial_query_type" op="equals" value="item_51_c"/>
                      </Enabled>
                    </TextBoxControl>
                  </RadioButton>
                  <RadioButton value="item_51_d"/>
                  <Layout gridHeight="8" gridWidth="1" rowIncrement="1"/>
                </RadioButtonGroupControl>
              </PropertiesPanel>
              <StaticText textKey="item_59.LABEL">
                <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="1" gridRow="1" gridWidth="1" rowWeight="0.0"/>
              </StaticText>
              <StaticText textKey="item_843.LABEL">
                <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="1" gridRow="5" gridWidth="1" rowWeight="1.0"/>
              </StaticText>
              <StaticText textKey="item_468.LABEL">
                <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="1" gridRow="4" gridWidth="1" rowWeight="0.0"/>
              </StaticText>
              <StaticText textKey="item_491.LABEL">
                <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="1" gridRow="3" gridWidth="1" rowWeight="0.0"/>
              </StaticText>
            </PropertiesPanel>
          </PropertiesPanel>
        </Tab>
        <Tab helpLink="[nativeHelp][com.ibm.spss.r.doc/clementine]uibuilder_helpbutton" resourceKey="tab_intraday">
          <PropertiesPanel>
            <Layout anchor="northwest" columnWeight="1.0" fill="both" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" rowWeight="1.0"/>
            <PropertiesPanel id="leftPanel">
              <Layout anchor="firstLineStart" columnWeight="1.0" fill="horizontal" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" rowWeight="1.0"/>
              <TextBoxControl labelAbove="true" property="control_1" resourceKey="control_1">
                <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/>
              </TextBoxControl>
              <PropertiesPanel borderTitleKey="item_adjust_intraday" borderType="etched" id="item_adjust_intraday">
                <Layout anchor="northwest" columnWeight="1.0" fill="both" gridColumn="0" gridRow="9" gridWidth="1" rowWeight="1.0"/>
                <CheckBoxControl labelAbove="true" property="item_43" resourceKey="item_43">
                  <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="0" gridRow="0" gridWidth="1" rowWeight="0.0"/>
                </CheckBoxControl>
                <StaticText textKey="item_84.LABEL">
                  <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="0" gridRow="3" gridWidth="1" rowWeight="0.0"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </StaticText>
                <PropertiesPanel>
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="6" gridWidth="1" rowWeight="0.0"/>
                  <SpinnerControl labelAbove="false" property="item_start_hh" resourceKey="item_start_hh" showLabel="true" stepSize="1"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </PropertiesPanel>
                <PropertiesPanel>
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="8" gridWidth="1" rowWeight="0.0"/>
                  <SpinnerControl labelAbove="false" property="item_start_mm" resourceKey="item_start_mm" showLabel="true" stepSize="1"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </PropertiesPanel>
                <PropertiesPanel>
                  <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="0" gridRow="10" gridWidth="1" rowWeight="0.0"/>
                  <SpinnerControl labelAbove="false" property="item_start_ss" resourceKey="item_start_ss" showLabel="true" stepSize="1"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </PropertiesPanel>
                <StaticText textKey="item_83.LABEL">
                  <Layout anchor="northwest" columnWeight="1.0" fill="none" gridColumn="0" gridRow="12" gridWidth="1" rowWeight="0.0"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </StaticText>
                <PropertiesPanel>
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="15" gridWidth="1" rowWeight="0.0"/>
                  <SpinnerControl labelAbove="false" property="item_end_hh" resourceKey="item_end_hh" showLabel="true" stepSize="1"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </PropertiesPanel>
                <PropertiesPanel>
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="17" gridWidth="1" rowWeight="0.0"/>
                  <SpinnerControl labelAbove="false" property="item_end_mm" resourceKey="item_end_mm" showLabel="true" stepSize="1"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </PropertiesPanel>
                <PropertiesPanel>
                  <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="19" gridWidth="1" rowWeight="0.0"/>
                  <SpinnerControl labelAbove="false" property="item_end_ss" resourceKey="item_end_ss" showLabel="true" stepSize="1"/>
                  <Enabled>
                    <ControlCondition control="item_43" op="equals" value="true"/>
                  </Enabled>
                </PropertiesPanel>
              </PropertiesPanel>			  
              <TextBoxControl labelAbove="true" property="control_3" resourceKey="control_3">
                <Layout anchor="northwest" columnWeight="1.0" fill="horizontal" gridColumn="0" gridRow="2" gridWidth="1" rowWeight="1.0"/>
              </TextBoxControl>
            </PropertiesPanel>
          </PropertiesPanel>
        </Tab>
        <Tab helpLink="[nativeHelp][com.ibm.spss.r.doc/clementine]rprocessnode_syntaxtab" resourceKey="data_options_tab">
          <PropertiesPanel>
            <PropertiesPanel borderTitleKey="readDataOptionsTitle" borderType="etched">
              <Layout anchor="northwest" columnWeight="1" fill="horizontal" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" leftIndent="4" rightIndent="4" rowWeight="1" topIndent="4"/>
              <PropertiesPanel>
                <CheckBoxControl property="rprocess.use_batch_size" resourceKey="useBatchSize">
                  <Layout gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1"/>
                </CheckBoxControl>
                <SpinnerControl property="rprocess.batch_size" stepSize="1000">
                  <Layout gridColumn="1" gridHeight="1" gridRow="0" gridWidth="1"/>
                  <Enabled>
                    <ControlCondition control="rprocess.use_batch_size" op="equals" value="true"/>
                  </Enabled>
                </SpinnerControl>
              </PropertiesPanel>
              <PropertiesPanel>
                <ComboBoxControl enumResourceKey="ConvertFlagFieldsType" property="rprocess.convert_flag" resourceKey="convertFlagFields">
                  <Layout gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1"/>
                </ComboBoxControl>
              </PropertiesPanel>
              <PropertiesPanel>
                <CheckBoxControl property="rprocess.convert_missing" resourceKey="convertMissing">
                  <Layout gridColumn="0" gridHeight="1" gridRow="1" gridWidth="1"/>
                </CheckBoxControl>
                <CheckBoxControl property="rprocess.convert_datetime" resourceKey="convertDatetime">
                  <Layout gridColumn="0" gridHeight="1" gridRow="2" gridWidth="1"/>
                </CheckBoxControl>
              </PropertiesPanel>
              <PropertiesPanel>
                <RadioButtonGroupControl property="rprocess.convert_datetime_class" resourceKey="convertDatetimeClass" showLabel="true">
                  <Layout gridColumn="0" gridHeight="1" gridRow="3" gridWidth="1" leftIndent="10"/>
                  <Enabled>
                    <ControlCondition control="rprocess.convert_datetime" op="equals" value="true"/>
                  </Enabled>
                </RadioButtonGroupControl>
              </PropertiesPanel>
            </PropertiesPanel>
          </PropertiesPanel>
        </Tab>
        <Tab helpLink="[nativeHelp][com.ibm.spss.r.doc/clementine]rprocessnode_consoleoutputtab" resourceKey="console_tab">
          <PropertiesPanel>
            <StaticText textKey="console_output.LABEL">
              <Layout anchor="firstLineStart" fill="horizontal" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" leftIndent="1"/>
            </StaticText>
            <ManagedPanel id="managed_applier_console_output_panel" swingClass="com.spss.shared.custom_gui.ui_builder.peers.ManagedModelOutputPanel">
              <Layout anchor="northwest" columnWeight="1" fill="both" gridColumn="0" gridHeight="1" gridRow="1" gridWidth="1" rowWeight="1"/>
              <ManagedUIElement id="applierConsoleOutputDisplay">
                <Layout anchor="northwest" columnWeight="1" fill="both" gridColumn="0" gridHeight="1" gridRow="0" gridWidth="1" rowWeight="1"/>
              </ManagedUIElement>
            </ManagedPanel>
          </PropertiesPanel>
        </Tab>
      </Tabs>
    </UserInterface>
    <OutputDataModel method="peer" mode="replace"/>
    <Execution>
      <Outputs>
        <OutputContainer id="C1" outputId="C1" targetContainer="ApplierConsoleOutput"/>
      </Outputs>
      <RunComponent context="rprocess" id="1">
        <OutputContainer containerName="ApplierConsoleOutput" id="C1" targetContainer="ApplierConsoleOutput"/>
      </RunComponent>
    </Execution>
    <Validations>
      <Validation messageType="error" property="item_apikey">
        <Format textKey="item_apikey.errorMsg"/>
        <Constraints>
          <Constraint>
            <PropertyCondition op="isNotEmpty" property="item_apikey" value="true"/>
          </Constraint>
        </Constraints>
      </Validation>
    </Validations>
  </Feature>
</Extension>